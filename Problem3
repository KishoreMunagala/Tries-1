Time: O(d * m + w * m)
Space: O(d * m)


class Solution 
{
    class TrieNode 
    {
        TrieNode[] children;
        boolean isEnd;

        public TrieNode() 
        {
            this.children = new TrieNode[26];
        }
    }

    private void insert(TrieNode root, String word) 
    {
        TrieNode curr = root;
        for (int i = 0; i < word.length(); i++) 
        {
            char c = word.charAt(i);
            if (curr.children[c - 'a'] == null) 
            {
                curr.children[c - 'a'] = new TrieNode();
            }
            curr = curr.children[c - 'a'];
        }
        curr.isEnd = true;
    }

    public String replaceWords(List<String> dictionary, String sentence) 
    {
        TrieNode root = new TrieNode();
        for (String word : dictionary) 
        {
            insert(root, word);
        }
        
        String[] strArr = sentence.split(" ");
        StringBuilder result = new StringBuilder();
        
        for (int k = 0; k < strArr.length; k++) 
        {
            String currWord = strArr[k];
            StringBuilder replacement = new StringBuilder();
            TrieNode curr = root;
            
            for (int i = 0; i < currWord.length(); i++) 
            {
                char c = currWord.charAt(i);
                if (curr.children[c - 'a'] == null || curr.isEnd) 
                {
                    break;
                }
                curr = curr.children[c - 'a'];
                replacement.append(c);
            }
            
            if (curr.isEnd) 
            {
                result.append(replacement);
            } 
            else 
            {
                result.append(currWord);
            }
            
            if (k < strArr.length - 1) 
            {
                result.append(" "); 
            }
        }
        
        return result.toString();
    }
}
